//
   Created by rulyardiansyah on 1/23/2017.

//- MOBILE DESIGN - iOS - components.pug
doctype html
html.no-js(lang="")
  include ../../_include/_header
  body
    <!--[if lt IE 8]>
    p(class="browserupgrade") You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.
    <![endif]-->

    // CONTENTS SHOULD BEGINS HERE
    .container
      header.header.fixed
        a(href="#menu") <span></span>
      section.content#content
        article
          h1 Components
          p About components.

        hr.article-separator

        article
          h2 Status Bar
          p The Status Bar contains basic system information such as the current carrier, time, battery status and more. It’s visually connected to the Navigation Bar and makes use of the same background fill. To match the style of your app and guarantee readability, the content of the status bar comes in two different styles: dark (black) and light (white).
          figure
            img(src="../../../img/mobile/ios/ios-components-status-bar.png" alt="iOS Component - Status Bar")
            img.hover-info(src="../../../img/mobile/ios/ios-components-status-bar-guide.png" alt="iOS Component - Status Bar")
            figcaption iOS Component - Status Bar
          p It is possible to hide the Status Bar, but think twice before doing so. For example, users might be interested in knowing if they are connected to a WiFi network when the app regularly downloads web content or if Bluetooth is enabled when the app requires a Bluetooth link to third-party hardware. A valid reason to hide the Status Bar is when you want to remove all distractions from a single element, for example, when displaying full screen content such as an image gallery.

        hr.article-separator

        article
          h2 Navigation Bar
          p The navigation bar contains the controls for navigating through the applications views and optionally to manage the content of the current view. It will always appear at the top of the screen, right below the status bar. By default, the background is slightly translucent and blurs content underneath the bar. The background fill of the bar can be set to a solid color, a gradient or a custom bitmap-pattern.
          figure
            img(src="../../../img/mobile/ios/ios-components-navigation-bar.png" alt="iOS Component - Navigation Bar")
            img.hover-info(src="../../../img/mobile/ios/ios-components-navigation-bar-guide.png" alt="iOS Component - Navigation Bar")
            figcaption iOS Component - Navigation Bar
          figure.auto
            img(src="../../../img/mobile/ios/ios-components-navigation-bar-landscape.png" alt="iOS Component - Navigation Bar")
            img.hover-info(src="../../../img/mobile/ios/ios-components-navigation-bar-landscape-guide.png" alt="iOS Component - Navigation Bar")
            figcaption On most devices, the height of the bar is reduced by 12pt, except on iPads. It's also a common practice to hide the status bar in landscape mode.
          p The elements should always follow a specific alignment pattern.
          ul
            li Back button should always be aligned to the left side.
            li Title of the current view should always be centered in the bar.
            li Action buttons should always be aligned to the right side. If possible, there should never be more than one primary action to avoid missed clicks and to maintain simplicity.

        hr.article-separator

        article
          h2 Search Bar
          p Search bars come in two different styles by default: prominent and minimal. Both versions do have the same functionality.
          ul
            li As long as no text was entered by the user, a placeholder text is shown inside the bar, and, optionally, a bookmarks icon that can be used to access recent or saved searches.
            li Once a search term is entered, the placeholder disappears, and a clear button to delete the entered value appears on the right edge.
          p Search bars can make use of a prompt — a short sentence to introduce the functionality in the context of the search. For example, "Enter a city, zip code or airport."
          figure
            img(src="../../../img/mobile/ios/ios-components-search-bar.png" alt="iOS Component - Search Bar")
            img.hover-info(src="../../../img/mobile/ios/ios-components-search-bar-guide.png" alt="iOS Component - Search Bar")
            figcaption iOS Component - Search Bar (without and with a prompt)
          p To provide even more control over a search query, it is possible to chain the search Bar with a scope bar. The scope bar will use the same style as the search bar and might be useful when there are clearly defined categories for the search results. For example, in a music app, the search results could be filtered again by interpreters, albums or songs.

        hr.article-separator

        article
          h2 Tool Bar
          p A toolbar contains a set of actions for managing or manipulating the content of the current view. On the iPhone, it will always appear aligned at the bottom edge of the screen, while on the iPad, it can also be displayed aligned at the top of the screen.
          p Similarly to the navigation bar, the background fill of toolbars can be modified, is translucent and blurs the underlaying content by default.
          figure
            img(src="../../../img/mobile/ios/ios-components-tool-bar.png" alt="iOS Component - Tool Bar")
            img.hover-info(src="../../../img/mobile/ios/ios-components-tool-bar-guide.png" alt="iOS Component - Tool Bar")
            figcaption iOS Component - Tool Bar
          p Toolbars should be used when a specific view requires more than three primary actions that would hardly fit or would look messy in the navigation bar.

        hr.article-separator

        article
          h2 Tab Bar
          p The tab bar is used to allow the user to quickly navigate through the separate views of an application, and it should only be used for this purpose. It always appears at the bottom edge of the screen. By default, its slightly translucent and uses the same system blur for underlaying content as the navigation bar.
          figure
            img(src="../../../img/mobile/ios/ios-components-tab-bar.png" alt="iOS Component - Tab Bar")
            img.hover-info(src="../../../img/mobile/ios/ios-components-tab-bar-guide.png" alt="iOS Component - Tab Bar")
            figcaption iOS Component - Tab Bar
          p A tab bar can only contain a fixed maximum number of tabs. Once there are more tabs than the maximum count, the last tab displayed will be replaced by a "More-tab" that will lead to a list of hidden tabs, with an option to re-order the displayed tabs.
          p While the maximum amount of tabs displayed is five on iPhones, it’s possible to display up to seven tabs on the iPad while avoiding a more-tab.
          p To notify users about new information on a view, it sometimes makes sense to apply a badge count to a tab bar button. If a view is temporarily disabled, the related tab button should not be completely hidden; instead, it should be faded out to visually communicate the disabled state.

        hr.article-separator

        article
          h2 Table View
          p Table views are used to display small to large amounts of list style information in a single or multiple columns and with the option to divide several rows into separate sections or to group them.
          p There are two basic table view types that should be used, depending on the type of data you are presenting.
          br
          h4 Plain
          figure
            img(src="../../../img/mobile/ios/ios-components-table-view-plain.png" alt="iOS Component - Table View (Plain)")
            img.hover-info(src="../../../img/mobile/ios/ios-components-table-view-plain-guide.png" alt="iOS Component - Table View (Plain)")
            figcaption iOS Component - Table View (Plain)
          p A plain table contains a number of rows that can have a header on the top and a footer after the last row. It’s possible to display a vertical navigation on the right edge of the screen to navigate through the table, which makes sense when presenting a big data set that could be sorted in some way (e.g., alphabetically descending).
          br
          h4 Grouped
          figure
            img(src="../../../img/mobile/ios/ios-components-table-view-grouped.png" alt="iOS Component - Table View (Grouped)")
            img.hover-info(src="../../../img/mobile/ios/ios-components-table-view-grouped-guide.png" alt="iOS Component - Table View (Grouped)")
            figcaption iOS Component - Table View (Grouped)
          p A grouped table allows you to organize rows in groups. Each group can have a header (best used to describe the context for the group) as well as a footer (good for help text, etc.). A grouped table needs to contain at least one group, and each group needs to contain at least one row.
          p For both table view types, a few styles are available to present the data in a way that allows users to easily scan, read and probably modify it.
          br
          h4 Default
          figure
            img(src="../../../img/mobile/ios/ios-components-table-view-default.png" alt="iOS Component - Table View (Default)")
            img.hover-info(src="../../../img/mobile/ios/ios-components-table-view-default-guide.png" alt="iOS Component - Table View (Default)")
            figcaption iOS Component - Table View (Default)
          p A table row in default style has an optional image aligned on the left and a title.
          br
          h4 With Subtitle
          figure
            img(src="../../../img/mobile/ios/ios-components-table-view-default-with-subtitle.png" alt="iOS Component - Table View (Default with Subtitle)")
            figcaption iOS Component - Table View (Default with Subtitle)
          p The subtitle table style enables a small subtitle text underneath the row title. It is useful for further explanations or short descriptions.
          br
          h4 With Value
          figure
            img(src="../../../img/mobile/ios/ios-components-table-view-default-with-value.png" alt="iOS Component - Table View (Default with Value)")
            figcaption iOS Component - Table View (Default with Value)
          p The value table style allows you to display a specific value that is related to the row title. Similar to the default style, each row can have an image and a title that are both aligned to the left. The title is followed by the right aligned label for the value, which is usually displayed in a slightly more subtle text color than the title.

        hr.article-separator

        article
          h2 Controls
          p iOS provides a wide range of controls for basically any required input type you can think of. Listed below you will find the most important (commonly used), but for a full list of the available controls, you should look at the iOS Developer Library.
          br
          h4 Buttons
          p Probably the most used control overall is the good old button. Since iOS 7, the default button design hasn't really looked like a button anymore, but rather more like a plain text link. The button control is highly customizable and allows you to style everything from text style, drop shadows and color to an icon that is either prepended or centered if there is no text label, as well as fully custom backgrounds.
          p Keep in mind that a button can have several states, which should be communicated with visual language: default, highlighted, selected and disabled.
          br
          h4 Pickers
          p Pickers are used to select one value from a list of available values. The web equivalent would be a select box (which the picker control is also used for when touching a select in Safari). An extended version of picker is the datepicker, which allows the user to scroll through a list of dates and times and select values for (configurable) day, month and time.
          figure
            img(src="../../../img/mobile/ios/ios-components-pickers-single-column.png" alt="iOS Component - Pickers (Single Column)")
            figcaption iOS Component - Pickers (Single Column)
            img(src="../../../img/mobile/ios/ios-components-pickers-multi-columns.png" alt="iOS Component - Pickers (Multi Columns)")
            figcaption iOS Component - Pickers (Multi Columns)
          p Except for the background color, it is not possible to change the visual style or size (same as keyboard) of a picker control. Most often, they appear at the bottom of the screens, where keyboards appear as well, but it is possible to use them in other positions.
          br
          h4 Segment Controls
          p A segment control contains a set of segments (at least two) that can be used for things like filtering content or to create tabs for clearly categorized content types.
          figure
            img(src="../../../img/mobile/ios/ios-components-segmented-control.png" alt="iOS Component - Segmented Control")
            img.hover-info(src="../../../img/mobile/ios/ios-components-segmented-control-guide.png" alt="iOS Component - Segmented Control")
            figcaption iOS Component - Segmented Control (Top: with label, Bottom: with icons)
          p Each segment can contain a text label or an image (icon), but never both. In addition, using a mixed set of segment types (text and images) in one segment control is not really recommended. The width of one segment changes automatically based on the number of segments (two segments: 50% of total control width, 5 segments: 20% of total control width).
          br
          h4 Sliders
          p The slider control allows the user to choose one specific value from a range of allowed values. Since choosing a value works pretty smoothly and without any steps, sliders are recommended for selecting an estimated, but not exact, value. For example, a slider would be a good control for setting the sound volume, since the user can hear the difference and can see the difference between loud and very loud, but a text input to set an exact dB value would be impractical.
          figure
            img(src="../../../img/mobile/ios/ios-components-sliders.png" alt="iOS Components - Sliders")
            img.hover-info(src="../../../img/mobile/ios/ios-components-sliders-guide.png" alt="iOS Components - Sliders")
            figcaption iOS Components - Sliders (without and with descriptive icons)
          p It is possible to set icons for the minimum and the maximum value, which are displayed on the start and end edge of the slider control, thereby allowing you to visually embrace the purpose of the slider.
          br
          h4 Stepper
          p Steppers should be used when the user should enter an exact value from a limited range of possible values (e.g., 1-10). A stepper always contains two segmented buttons, one for lowering and one for raising the current value.
          figure
            img(src="../../../img/mobile/ios/ios-components-stepper.png" alt="iOS Components - Stepper")
            img.hover-info(src="../../../img/mobile/ios/ios-components-stepper-guide.png" alt="iOS Components - Stepper")
            figcaption iOS Components - Stepper
          p Visually, the stepper control is highly customizable:
          ul
            li you can use your own icons for stepper buttons;
            li when maintaining the native iOS look, you can customize the color of borders, background and icons by using a tint color, which automatically sets the color for each of these elements; and
            li if you want to go further, you can use completely custom background images for the stepper buttons as well as for the separator.
          br
          h4 Switch
          figure
            img(src="../../../img/mobile/ios/ios-components-switch.png" alt="iOS Component - Switch")
            img.hover-info(src="../../../img/mobile/ios/ios-components-switch-guide.png" alt="iOS Component - Switch")
            figcaption iOS Component - Switch
          p A switch allows the user to quickly toggle between two possible states: on and off. It’s the checkbox for iOS apps. It is possible to customize the color for the on and off states, but the appearance of the toggle button and size of the switch are set and cannot be changed.
          br
          h4 Keyboard
          figure
            img(src="../../../img/mobile/ios/ios-components-keyboard-default.png" alt="iOS Component - Keyboard")
            figcaption iOS Component - Keyboard
            img(src="../../../img/mobile/ios/ios-components-keyboard-default-dark.png" alt="iOS Component - Keyboard")
            figcaption iOS Component - Keyboard (Dark)
          p There are various keyboard types available to provide the best possible keyboard for a specific text input. While it is possible to build your own completely custom keyboard, default keyboards cannot be customized in style or size.

        hr.article-separator

        article
          h2 Modals, Popovers and Alerts
          p iOS provides various styles of temporary views that can be used to display, edit, and manipulate data in a way that fits best in a given situation. While each temporary view exists for a very specific purpose and each one looks different, all temporary views still have one thing in common: When displayed, it’s the highest index layer on the current view (they appear on top of everything else), and content underneath is overlayed by a translucent black background.
          br
          h4 Activity View
          p An activity view is used to perform specific tasks. These tasks can be default system tasks such as share content via the available options, or they can be completely custom actions. When designing icons for custom task buttons, you should follow the same guidelines as for the active state of bar button icons — solid fill, no effects, on a transparent background.
          p For example, this is an Activity View specific for sharing task.
          figure
            img(src="../../../img/mobile/ios/ios-components-activity-view.png" alt="iOS Component - Activity View")
            figcaption iOS Component - Activity View
          br
          h4 Actions
          p Action Sheets are used to perform one single action from a list of available actions and to force the user of an app to confirm an action or cancel it.
          figure
            img(src="../../../img/mobile/ios/ios-components-actions.png" alt="iOS Component - Actions")
            img.hover-info(src="../../../img/mobile/ios/ios-components-actions-guide.png" alt="iOS Component - Actions")
            figcaption iOS Component - Actions
          p In portrait mode (and on small landscape screen resolutions), actions are always displayed as a list of buttons sliding in and staying at the bottom edge of the screen. In this case, an action sheet should always have a cancel button to close the view and not perform any of the listed actions.
          p When there is enough space available (e.g., on iPad screens), action sheets visually transform into popovers. A button to close the view is not required anymore because tapping a target anywhere outside the popover will close it automatically.
          br
          h4 Alerts
          p The purpose of alerts is to inform the user about critical information and optionally to force the user to make a decision about some action.
          p An alert view does always contain a title text, which should not be longer than one line and one (for pure informational alerts, e.g., "OK") or two (for alerts that require a decision, e.g., "Send" and "Cancel") buttons.
          figure
            img(src="../../../img/mobile/ios/ios-components-alert.png" alt="iOS Component - Alert")
            img.hover-info(src="../../../img/mobile/ios/ios-components-alert-guide.png" alt="iOS Component - Alert")
            figcaption iOS Component - Alert
          p Also, you can add a message text, if needed, as well as up to two text input fields, one of which can be a masked input field, which is appropriate for sensitive information like passwords or PINs.
          br
          h4 Edit Menu
          figure
            img(src="../../../img/mobile/ios/ios-components-edit-menu.png" alt="iOS Component - Edit Menu")
            img.hover-info(src="../../../img/mobile/ios/ios-components-edit-menu-guide.png" alt="iOS Component - Alert")
            figcaption iOS Component - Edit Menu
          p The Edit Menu allows users to perform actions such as Copy, Paste, Cut, etc., when an element is selected (text, images, others). While it is possible to control which operations the user can choose from, the visual appearance of edit menus is set and not configurable unless you build your own completely custom edit menu.
          br
          h4 Popover
          p Popovers are useful when a specific action requires multiple user inputs before proceeding. A good example is adding an item, which has a few attributes that need to be set before the item can be created.
          p In a horizontal environment, popovers reveal underneath the related control (such as a button) with an arrow pointing to that control while opened. The background of a popover uses a slightly reduced opacity and blurs the content underneath, just as many other UI elements have done since iOS 7.
          figure
            img(src="../../../img/mobile/ios/ios-components-popover.png" alt="iOS Component - Popover")
            img.hover-info(src="../../../img/mobile/ios/ios-components-popover-guide.png" alt="iOS Component - Popover")
            figcaption iOS Component - Popover
          p A popover is a powerful temporary view that can contain various objects such as its own navigation bar, table views, maps or web views. When a popover grows in size due to the number of contained elements and reaches the bottom edge of the viewport, it is possible to scroll within the popover.
          br
          h4 Modals
          p Modals are a useful view for tasks that require multiple commands or inputs by the user. They appear on top of everything else, and, while open, block interaction with any other interactive elements underneath.
          p The typical modal usually provides:
          ul
            li a title to describe the task;
            li a button to close the modal without saving or performing any other actions;
            li a button to save or submit any entered information; and
            li various elements for user input in the modal body.
          p There are three different modal styles available:
          ol
            li Full screen: covers the entire screen.
            li Page sheet: In portrait mode, the modal covers the underlaying content only partially, leaving a small portion of the parent view visible underneath the translucent black background. In landscape mode, the page sheet modal acts just like a full screen modal.
            li Form sheet: In portrait mode, the modal appears in the center of the screen, keeping the surrounding content of the parent view visible underneath the translucent black background. The position of the modal adjusts automatically when a keyboard needs to be displayed. In landscape mode, the page sheet modal acts just like a full screen modal.

      footer.section-nav-chapter
        nav.prev-chapter
          h4 Prev chapter
          a(href="typography.html") Typography
        nav.next-chapter
          h4 Next chapter
          a(href="resources.html") Resources

    // NAVIGATION begins here
    include ../../_include/_menu
    // NAVIGATION ends here

    // CONTENTS SHOULD BEGINS HERE

  include ../../_include/_footer

  script.
    $("#ios-design-components").addClass("mm-selected");
