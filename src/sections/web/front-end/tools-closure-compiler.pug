//
   Created by rulyardiansyah on 1/30/2017.

//- WEB-DESKTOP - FRONT-END - tools-closure-compiler.pug
doctype html
html.no-js(lang="")
  include ../../_include/_header
  body
    <!--[if lt IE 8]>
    p(class="browserupgrade") You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.
    <![endif]-->

    // CONTENTS SHOULD BEGINS HERE

    .container
      header.header.fixed
        a(href="#menu") <span></span>
      section.content#content
        article
          h1 Tools: Closure Compiler
          p The <a href="https://developers.google.com/closure/compiler/" target="_blank">Closure Compiler</a> is a tool for making JavaScript download and run faster. Instead of compiling from a source language to machine code, it compiles from JavaScript to better JavaScript. It parses your JavaScript, analyzes it, removes dead code and rewrites and minimizes what's left. It also checks syntax, variable references, and types, and warns about common JavaScript pitfalls.

        hr.article-separator

        article
          h2 The Benefits
          p What are the benefits of using Closure Compiler?
          ul
            li <strong>Efficiency</strong>. The Closure Compiler reduces the size of your JavaScript files and makes them more efficient, helping your application to load faster and reducing your bandwidth needs.
            li <strong>Code checking</strong>. The Closure Compiler provides warnings for illegal JavaScript and warnings for potentially dangerous operations, helping you to produce JavaScript that is less buggy and easier to maintain.

        hr.article-separator

        article
          h2 How To Use Closure Compiler?
          p Currently, there are three ways to use this:
          ul
            li A simple web application.
            li An open source Java application that you can run from the command line.
            li A RESTful API.
          p But, for the sake of simplicity of this sub-section, we will skip the last one.
          br
          h4 Run as web application
          p The easiest way to get familiar with the Closure Compiler service is by optimizing a few simple functions in the service's web UI.
          ol
            li Access the Closure Compiler UI by opening <a href="http://closure-compiler.appspot.com/home" target="_blank">this page</a>.
            li You should see the Closure Compiler UI pre-populated with a simple Hello World function.
              figure.auto
                img(src="../../../img/web/tools-closure-compiler-web-app.png" alt="Tools - Closure Compiler web application")
                figcaption Tools - Closure Compiler UI
              p You can simply pasting in the link to your JavaScript file or the code itself.
            li Set what kind of optimization and formatting you would like to have.
            li Then, click Compile to see the result.
              figure.auto
                img(src="../../../img/web/tools-closure-compiler-web-app-result.png" alt="Tools - Closure Compiler result")
                figcaption The result
          p That's it. You now have a much smaller version of the JavaScript code that functions identically to the original. The Closure Compiler service reduced the code from 92 bytes to just 55 bytes by removing comments and whitespace and renaming basic symbols.
          br
          h4 Run as Java application
          p The Closure Compiler application is a Java command-line utility that compresses, optimizes, and looks for mistakes in your JavaScript. To try out the Closure Compiler application with a simple JavaScript program, follow the steps below.
          p To work through this exercise you need the Java Runtime Environment version 7.
          ol
            li Download the Closure Compiler package
              p Create a working directory called <code>closure-compiler</code>. Download the Closure Compiler <a href="../../../resources/web/front-end/closure-compiler-latest.zip">compiler.jar</a> file and save it in <code>closure-compiler</code>.
            li Create a JavaScript file
              p Create a file named hello.js containing the following JavaScript:
              pre.
                // A simple function.
                function hello(longName) {
                  alert('Hello, ' + longName);
                }
                hello('there!');
              p Save this file in the closure-compiler directory.
            li Compile the JavaScript file
              p Run the following command from the <code>closure-compiler</code> directory:
              pre.
                java -jar compiler.jar --js hello.js --js_output_file hello-compiled.js
              This command creates a new file called <code>hello-compiled.js</code>, which contains the following JavaScript:
              pre.
                function hello(a){alert("Hello, "+a)}hello("New User");
              p Note that the compiler has stripped comments, whitespace and an unnecessary semi-colon. The compiler has also replaced the parameter name longName with the shorter name a. The result is a much smaller JavaScript file.
              p To confirm that the compiled JavaScript code still works correctly, include hello-compiled.js in an HTML file like this one:
              pre.
                &lt;html&gt;
                &lt;head&gt;&lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;
                &lt;body&gt;
                &lt;script src="hello-compiled.js"&gt;&lt;/script&gt;
                &lt;/body&gt;
                &lt;/html&gt;
              p Load the HTML file in a browser, and you should see the alert dialog.
          p To learn more about other flags and options for the Closure Compiler, execute the jar with the <code>--help</code> flag:
          pre.
            java -jar compiler.jar --help

        hr.article-separator

        article
          h2 Optimization Level
          p The Closure Compiler lets you choose from three levels of compilation, ranging from simple removal of whitespace and comments to aggressive code transformations.
          br
          h4 WHITESPACE_ONLY
          p The <code>WHITESPACE_ONLY</code> compilation level removes comments from your code and also removes line breaks, unnecessary spaces, extraneous punctuation (such as parentheses and semicolons), and other whitespace. The output JavaScript is functionally identical to the source JavaScript.
          p This compilation level provides the least compression of the three levels.
          br
          h4 SIMPLE_OPTIMIZATIONS
          p The <code>SIMPLE_OPTIMIZATIONS</code> compilation level performs the same whitespace and comment removal as <code>WHITESPACE_ONLY</code>, but it also performs optimizations within expressions and functions, including renaming local variables and function parameters to shorter names. Renaming variables to shorter names makes code significantly smaller. Because the <code>SIMPLE_OPTIMIZATIONS</code> level renames only symbols that are local to functions, it does not interfere with the interaction between the compiled JavaScript and other JavaScript.
          p SIMPLE_OPTIMIZATIONS is the default compilation level.
          br
          h4 ADVANCED_OPTIMIZATIONS
          p The <code>ADVANCED_OPTIMIZATIONS</code> compilation level performs the same transformations as <code>SIMPLE_OPTIMIZATIONS</code>, but adds a variety of more aggressive global transformations to achieve the highest compression of all three levels. The <code>ADVANCED_OPTIMIZATIONS</code> level compresses JavaScript well beyond what is possible with other tools.
          p To enable this extreme compression, <code>ADVANCED_OPTIMIZATIONS</code> makes strong assumptions about the compiled code. If your code does not conform to those assumptions, <code>ADVANCED_OPTIMIZATIONS</code> will produce code that does not run.
          p For example, code compiled with <code>ADVANCED_OPTIMIZATIONS</code> may not work with uncompiled code unless you take special steps to ensure interoperability. If you do not flag external functions and properties referenced in your code, Closure Compiler will inappropriately rename references in your code, causing mismatches between the names in your code and in the external code.
          p The ADVANCED_OPTIMIZATIONS transformations include:
          ul
            li More aggressive renaming:
              p Compilation with <code>SIMPLE_OPTIMIZATIONS</code> only renames parameters and variables within functions. <code>ADVANCED_OPTIMIZATIONS</code> also renames global variables, function names, and properties.
            li Dead code removal:
              p Compilation with <code>ADVANCED_OPTIMIZATIONS</code> removes code that is provably unreachable. This is especially useful in combination with large libraries. If you use only a few functions from a large library file, the compiler can remove everything except those functions from its output.
            li Global inlining:
              p Compilation with <code>ADVANCED_OPTIMIZATIONS</code> replaces some function calls with the body of the function. This transformation is known as "inlining". The compiler only inlines functions when it determines that inlining is safe and saves space. Compilation with <code>ADVANCED_OPTIMIZATIONS</code> also inlines constants and some variables when the compiler determines that it can do so safely.
          br
          h4 How to Set Optimization?
          p To set the compilation level in the Closure Compiler application, include the command line flag <code>--compilation_level</code> with a value of <code>WHITESPACE_ONLY</code>, <code>SIMPLE</code>, or <code>ADVANCED</code>, as in the following command:
          pre.
            java -jar compiler.jar --compilation_level ADVANCED_OPTIMIZATIONS --js hello.js

      footer.section-nav-chapter
        nav.prev-chapter
          h4 Prev chapter
          a(href="performance-checklist.html") Performance Checklist
        nav.next-chapter
          h4 Next chapter
          a(href="tools-pagespeed.html") Tools: PageSpeed

    // NAVIGATION begins here
    include ../../_include/_menu
    // NAVIGATION ends here

    // CONTENTS SHOULD ENDS HERE

  include ../../_include/_footer

  script.
    $("#front-end-tools-closure-compiler").addClass("mm-selected");